server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == input$y) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light()
session$onSessionEnded(stopApp)
})
}
shinyApp(ui, server)
pelagic_org%>%filter(analyte == 'pH')%>%ggplot(aes(x = 'sample_date', y = 'result'))%>%geom_point()
pelagic_org%>%filter(analyte == 'pH')%>%ggplot(aes(x = 'sample_date', y = 'result'))+geom_point()
view(pelagic_org)
pelagic_pH <- pelagic_org %>%
filter(analyte == 'pH')
nrow(pelagic_pH)
head(pelagic_pH)
pelagic_pH %>%
filter(sample_date <= '2010-12-31') %>%
ggplot(aes(x = sample_date, y = result)) +
geom_point() +
geom_smooth() +
labs(title = 'pH over time')
#not really sure how to cap it at 2010 since I don't know how to filter dates
pelagic_pH <- pelagic_org %>%
filter(analyte == 'Temperature')
nrow(pelagic_pH)
head(pelagic_pH)
pelagic_pH %>%
filter(sample_date <= '2010-12-31') %>%
ggplot(aes(x = sample_date, y = result)) +
geom_point() +
geom_smooth() +
labs(title = 'pH over time')
pelagic_pH <- pelagic_org %>%
filter(analyte == 'Temperature')
nrow(pelagic_pH)
head(pelagic_pH)
pelagic_pH %>%
filter(sample_date <= '2010-12-31') %>%
ggplot(aes(x = sample_date, y = result)) +
geom_point() +
geom_smooth(method = lm) +
labs(title = 'pH over time')
pelagic_pH <- pelagic_org %>%
filter(analyte == 'pH')
nrow(pelagic_pH)
head(pelagic_pH)
pelagic_pH %>%
filter(sample_date <= '2010-12-31') %>%
ggplot(aes(x = sample_date, y = result)) +
geom_point() +
geom_smooth(method = lm) +
labs(title = 'pH over time')
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == input$y) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light() +
labs(title = 'Analyte Change Over Time',
x = 'Date',
y = if (input$y == 'pH') {
'pH'
} else if (input$y == 'Temperature') {
'Temperature (Deg C)'
} else {
'Hopefully this works'
})
session$onSessionEnded(stopApp)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == input$y) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light() +
labs(title = 'Analyte Change Over Time',
x = 'Date',
y = if (input$y == 'pH') {
'pH'
} else if (input$y == 'Temperature') {
'Temperature (Deg C)'
} else {
'Hopefully this works'
})
session$onSessionEnded(stopApp)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == input$y) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light() +
labs(title = 'Analyte Change Over Time',
x = 'Date',
y = if (input$y == 'pH') {
print('pH')
} else if (input$y == 'Temperature') {
'Temperature (Deg C)'
} else {
'Hopefully this works'
})
session$onSessionEnded(stopApp)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == input$y) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light()
session$onSessionEnded(stopApp)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == input$y) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light()
session$onSessionEnded(stopApp)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
# filter(analyte == input$y) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light() +
labs(title = 'Analyte Change Over Time',
x = 'Date',
y = if (input$y == 'pH') {
'pH'
} else if (input$y == 'Temperature') {
'Temperature (Deg C)'
} else {
'Hopefully this works'
})
session$onSessionEnded(stopApp)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == as.character(input$y)) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light() +
labs(title = 'Analyte Change Over Time',
x = 'Date',
y = if (input$y == 'pH') {
'pH'
} else if (input$y == 'Temperature') {
'Temperature (Deg C)'
} else {
'Hopefully this works'
})
session$onSessionEnded(stopApp)
})
}
shinyApp(ui, server)
taxda <- readr::read_csv("toxicity_davis.csv")
taxda_noNA <- taxda %>%
select(-c(group_samples, occupation_method, starting_bank, distance_from_bank, unit_distance_from_bank, stream_width, unit_stream_width, station_water_depth, unit_station_water_depth, hydro_mod, hydro_mod_loc, channel_width, upstream_length, downstream_length, total_reach))
taxda_sep <- taxda %>%
separate(organism_name, into = c('genus', 'species'), sep = ' ')
pelagic_org <- taxda_sep %>%
filter(grepl('Pelagic', project))
unique(pelagic_org$analyte)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == as.character(input$y)) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light() +
labs(title = 'Analyte Change Over Time',
x = 'Date',
y = if (input$y == 'pH') {
'pH'
} else if (input$y == 'Temperature') {
'Temperature (Deg C)'
} else {
'Hopefully this works'
})
session$onSessionEnded(stopApp)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == input$y) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light() +
labs(title = 'Analyte Change Over Time',
x = 'Date',
y = if (input$y == 'pH') {
'pH'
} else if (input$y == 'Temperature') {
'Temperature (Deg C)'
} else
'Hopefully this works'
)
session$onSessionEnded(stopApp)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == input$y) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light() +
labs(title = 'Analyte Change Over Time',
x = 'Date',
y = if (input$y == 'pH') {
'pH'
} else if (input$y == 'Temperature') {
'Temperature (Deg C)'
} else
'Hopefully this works'
)
# session$onSessionEnded(stopApp)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == input$y) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light() +
labs(title = 'Analyte Change Over Time',
x = 'Date',
y = if (input$y == 'pH') {
'pH'
} else if (input$y == 'Temperature') {
'Temperature (Deg C)'
} else
'Hopefully this works'
)
# session$onSessionEnded(stopApp)
#I don't know why but commenting this out seems to make everything work
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Locomotion"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("Analyte", " Select Analyte of Interest:", choices=unique(taxda$analyte)), hr()),
# create a spot for the barplot
mainPanel(
plotOutput("anyPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# fill in the spot we created for a plot
output$anyPlot <- renderPlot({
taxda_sep %>%
filter(analyte == input$analyte) %>%
ggplot(aes_string(x=year, y = result)) +
geom_line()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == input$y) %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light() +
labs(title = 'Analyte Change Over Time',
x = 'Date',
y = if (input$y == 'pH') {
'pH'
} else if (input$y == 'Temperature') {
'Temperature (Deg C)'
} else if (input$y == 'Oxygen, Dissolved, Not Recorded') {
'Dissolve Oxygen (mg/L)'
} else if (input$y == 'Hardness as CaCO3, Not Recorded') {
'Water Hardness Measured by CaCO3 Concentrations (mg/L)'
} else if (input$y == 'Ammonia as NH3, Unionized, Not Recorded') {
'Amount of NH3 in Water (mg/L)'
}
)
# session$onSessionEnded(stopApp)
#I don't know why but commenting this out seems to make everything work
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'San Joaquin River Delta Data'),
dashboardSidebar(disable = T),
dashboardBody(
selectInput('y', 'Select Analyte', choices = c('pH', 'Oxygen, Dissolved, Not Recorded', 'Hardness as CaCO3, Not Recorded', 'Temperature', 'Ammonia as NH3, Unionized, Not Recorded'),
selected = 'pH'),
plotOutput('plot', width = '500px', height = '400px'))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
pelagic_org %>%
filter(analyte == input$y, sample_date <= '2010-12-31') %>%
ggplot(aes_string(x = 'sample_date', y = 'result')) +
geom_point() +
geom_smooth() +
theme_light() +
labs(title = 'Analyte Change Over Time',
x = 'Date',
y = if (input$y == 'pH') {
'pH'
} else if (input$y == 'Temperature') {
'Temperature (Deg C)'
} else if (input$y == 'Oxygen, Dissolved, Not Recorded') {
'Dissolve Oxygen (mg/L)'
} else if (input$y == 'Hardness as CaCO3, Not Recorded') {
'Water Hardness Measured by CaCO3 Concentrations (mg/L)'
} else if (input$y == 'Ammonia as NH3, Unionized, Not Recorded') {
'Amount of NH3 in Water (mg/L)'
}
)
# session$onSessionEnded(stopApp)
#I don't know why but commenting this out seems to make everything work
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
taxda <- readr::read_csv("toxicity_davis.csv")
glimpse(taxda)
library(ggVennDiagram)
library(RColorBrewer)
#install.packages("ggworldcloud")
library(ggwordcloud)
library(tidyverse)
library(naniar)
library(janitor)
library(skimr)
library(shiny)
library(shinydashboard)
library(lubridate)
library(ggmap)
taxda_sep %>%
count(analyte)
taxda_sep %>%
count(organism_name)
ui <-
dashboardPage(
dashboardHeader(title = "Analyte"),
dashboardSidebar(disable =  T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Analyte", choices = c("Survival", "Oxygen, Dissolved, Total", "pH"),
selected = "pH"),
selectInput("y", "Select Orgnaism", choices = c("Ceriodaphnia dubia", "Eurytemora affinis", "Hyalella azteca", "Hypomesus transpacificus", "Lemna minor", "Morone saxatilis	", "Oncorhynchus mykiss", "Pimephales promelas", "Selenastrum capricornutum"),
selected = "Lemna minor"),
),
box(title = "Plot of Analyte", width = 9,
plotOutput("plot", width = "600px", height = "500px"))
)
)
)
server <- function(input, output,session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
taxda_sepyr %>%
filter(analyte == input$x) %>%
filter(organism_name == input$y) %>%
ggplot(aes(x = year, y= result, fill = organism_name)) +
geom_col() +
labs(x = "Ethnicity", y= "Density") +
theme_classic(base_size = 18)
})
}
shinyApp(ui, server)
taxda_sep %>%
count(analyte)
taxda_sep %>%
count(organism_name)
